name: Release new version

on:
  push:
    branches:
      - master

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.version-changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if version changed
        id: check
        run: |
          CURR_VERSION=$(grep 'version =' build.gradle.kts | awk '{print $3}' | sed 's/\"//g')          
          TAG_EXISTS=$(git tag | grep -oP "^$CURR_VERSION$" || echo "")        
          if [[ -n "$TAG_EXISTS" ]]; then
            echo "::set-output name=version-changed::false"
          else
            echo "::set-output name=version-changed::true"
          fi

  jvm-android:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    env:
      SIGN_JAR_AND_AAR: true
    steps:
      - name: Check Out
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make gradlew executable again
        run: chmod +x ./gradlew

      - name: Prepare jar/arr sign data
        run: |
          mkdir .sign
          echo "${{ secrets.SIGNING_SECRET_KEY_RING }}" | base64 --decode >> .sign/ring.gpg

      - name: Publish to Sonatype repository
        run: ./gradlew clean publishAllPublicationsToSonatypeRepository closeAndReleaseSonatypeStagingRepository
        env:
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SIGNING_SECRET_KEY_RING_FILE: .sign/ring.gpg
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}

      - name: Clean jar/arr sign data
        run: rm -rf .sign

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jvm-android-release
          path: |
            ./build/libs/*.jar
            ./build/outputs/*.aar

  cocoapods:
    runs-on: macos-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    steps:
      - name: Check Out
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make gradlew executable again
        run: chmod +x ./gradlew

      - name: Install Cocoapods
        run: gem install cocoapods

      - name: Build XCFramework
        run: ./gradlew clean podPublishReleaseXCFramework

      - name: Checkout cocoapods sources
        uses: actions/checkout@v3
        with:
          path: biometric-sdk-cocoapods-release
          repository: biometric-technologies/biometric-sdk-cocoapods-release
          ref: main

      - name: Update cocoapods sources
        working-directory: ./biometric-sdk-cocoapods-release
        run: cp -a ./../build/cocoapods/publish/release/. .

      - name: Get project version
        run: echo "VERSION=$(grep 'version =' build.gradle.kts | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV

      - name: Setup  SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.COCOAPODS_GIT_DEPLOY_KEY }}

      - name: Commit and push cocoapods sources
        working-directory: ./biometric-sdk-cocoapods-release
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add -A
          git commit -a -m "Release $VERSION"
          git push
          git tag $VERSION
          git push --tags

      - name: Release library to Cocoapods
        working-directory: ./biometric-sdk-cocoapods-release
        run: pod trunk push BiometricSdk.podspec
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}

      - name: Zip artifact sources
        run: zip -r biometric-sdk-xcframework-$VERSION-sources.zip ./build/cocoapods/publish/release/BiometricSdk.xcframework

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cocoapods-release
          path: ./biometric-sdk-xcframework-$VERSION-sources.zip

  git-release:
    runs-on: ubuntu-latest
    needs:
      - jvm-android
      - cocoapods
    steps:
      - name: Check Out
        uses: actions/checkout@v3

      - name: Get project version
        run: echo "VERSION=$(grep 'version =' build.gradle.kts | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV

      - name: Get release name
        run: echo "RELEASE_NAME=[$(date +'%Y-%m-%d')] v${{ env.VERSION }}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: jvm-android-release
          path: ./jvm-android-release

      - uses: actions/download-artifact@v3
        with:
          name: cocoapods-release
          path: ./cocoapods-release

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.RELEASE_NAME }}
          body: Binaries, sources and docs
          draft: false
          prerelease: false

      - name: Upload jvm and android artifacts
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create-release.outputs.id }}
          assets_path: ./jvm-android-release

      - name: Upload cocoapods artifacts
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create-release.outputs.id }}
          assets_path: ./cocoapods-release